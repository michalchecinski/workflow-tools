name: Build & Release

on:
  push:
    branches:
      - dev

jobs:
  merge-code:
    name: Auto merge code
    runs-on: ubuntu-20.04
    env:
      _DIFF_BRANCH: "main"
    outputs:
      dotfiles-changed: ${{ steps.dotfiles.outputs.changed }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Setup git
        run: |
          git config user.name = "GitHub Action Bot"
          git config user.email = "<>"

          git fetch -a

      - name: Check dotfile changes
        id: dotfiles
        run: |
          DIFF_LEN=$(git diff --name-only origin/$_DIFF_BRANCH -- dotfiles/* bin/dotfiles | wc -l | xargs)
          echo "[*] git diff lines: $DIFF_LEN"
          echo "=====Files Changed====="
          git diff --name-only origin/$_DIFF_BRANCH -- dotfiles/* bin/dotfiles
          echo "======================="

          if [ "$DIFF_LEN" != "0" ]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: test git diff
        run: |
          git diff origin/main

      - name: Auto "merge" main
        run: |
          git push origin dev:main --force-with-lease


  release-dotfiles:
    name: Release Dotfiles
    runs-on: ubuntu-20.04
    needs: merge-code
    if: needs.merge-code.outputs.dotfiles-changed == 'true'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Get release version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_tag=$(hub release -L 1)
          current_version=${current_tag:1}
          file_version=$(grep version_stub .version | grep -o "[0-9].[0-9]")
          echo "current release version: $current_version"
          echo "version from file: $file_version"

          if [[ $($current_version | cut -d . -f "1 2") == "$file_verison" ]]; then
            new_version=$file_version.$(expr $(echo $current_version | cut -d . -f 3) + 1)
          else
            new_version=$file_version.0
          fi

          echo "::set-output name=value::$new_version"

      - name: Build Ubuntu asset
        env:
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          mkdir -p dist/ubuntu-dotfiles
          cp -a dotfiles/current/shared/. dist/ubuntu-dotfiles
          cp -a dotfiles/current/ubuntu/. dist/ubuntu-dotfiles
          echo "$VERSION" > dist/ubuntu-dotfiles/.version
          cd dist
          zip -r ubuntu-dotfiles-$VERSION.zip ubuntu-dotfiles

      - name: Build Mac asset
        env:
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          mkdir -p dist/mac-dotfiles
          cp -a dotfiles/current/shared/. dist/mac-dotfiles
          cp -a dotfiles/current/mac/. dist/mac-dotfiles
          echo "$VERSION" > dist/mac-dotfiles/.version
          cd dist
          zip -r mac-dotfiles-$VERSION.zip mac-dotfiles

      - name: Create release
        uses: ncipollo/release-action@95215a3cb6e6a1908b3c44e00b4fdb15548b1e09
        with:
          artifacts: |
            dist/ubuntu-dotfiles-${{ steps.version.outputs.value }}.zip,
            dist/mac-dotfiles-${{ steps.version.outputs.value }}.zip,
            bin/dotfiles
          commit: ${{ github.sha }}
          tag: "v${{ steps.version.outputs.value }}"
          name: "Version ${{ steps.version.outputs.value }}"
          token: ${{ secrets.GITHUB_TOKEN }}
