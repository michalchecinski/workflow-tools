#!/bin/bash
# 
# Manage the homelab via Ansible playbooks without the needing to remember the long Ansible Playbook commands

_ANSIBLE_ROOT_DIR=$HOME/workflow-tools/homelab/ansible

usage() {
  echo "
-----
Usage: homelab [COMMAND] [ARGS] 
  homelab is a tool to help manage the homelab via ansible. I was finding myself opening the README to reference the 
  commands every time I was going to update the machines in my homelab.

Commands
  update - Updates the specified Ansible target
    Args:
      target - the target machine
    Examples:
      homelab update homelab

  down - Powers down the specified Ansible target
    Args:
      target - the target machine
    Examples:
      homelab down homelab

  help - Prints out the usage doc
    Examples: 
      homelab help
"
}

err() {
  if [[ $1 ]]; then
    echo "[!] $1"
  fi
  exit 1
}


##############################
# Checks if the target machine is supported
# Globals: 
#   _ANSIBLE_ROOT_DIR
# Arguments: 
#   1 - command target
##############################
check-target() {
  local target=$1
  local dirty_hosts=$(grep $_ANSIBLE_ROOT_DIR/hosts -e "\[.*\]")
  local hosts=$(
    for host in $dirty_hosts; do
      echo ${host:1:-1} | cut -d ":" -f 1
    done
  )

  hosts=($hosts)
  if [[ ! " ${hosts[*]} " =~ " ${target} " ]]; then
    err "update target not supported: $target"
  fi

}

##############################
# Run an OS update against target machine
# Globals: 
#   _ANSIBLE_ROOT_DIR
# Arguments: 
#   1 - update target
##############################
update() {
  local target=$1
  ansible-playbook -i $_ANSIBLE_ROOT_DIR/hosts \
    -K -e "targets=$target" \
    $_ANSIBLE_ROOT_DIR/playbooks/homelab/update-os.yaml
}

##############################
# Power down target machine
# Globals: 
#   _ANSIBLE_ROOT_DIR
# Arguments: 
#   1 - update target
##############################
power-down() {
  local target=$1
  ansible-playbook -i $_ANSIBLE_ROOT_DIR/hosts \
    -K -e "targets=$target" \
    $_ANSIBLE_ROOT_DIR/playbooks/homelab/power-down.yaml
}

# Get command
COMMAND=$1; shift

# Run command
case $COMMAND in 
  "update") 
    TARGET=$1
    check-target $TARGET
    update $TARGET
    ;;
  "down")
    TARGET=$1
    check-target $TARGET
    update $TARGET
    ;;
  "help" | "-h" | "--help") usage ;;
  "") err "Missing command." ;;
  *) err "Unrecognized command: $COMMAND" ;;
esac
